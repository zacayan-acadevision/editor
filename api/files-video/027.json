[{"tag":"h1","inner":"UseQueryClient - Configurar dinamicamente"},{"tag":"p","inner":"Ahora permítanme volver a ejecutar el servidor para que vean los errores. Entonces, veamos que ahora tenemos otras opciones súper interesantes. Podemos acceder a la calle que vemos aquí globalmente y podemos incluso modificar lo que tenemos en caché de forma programática. "},{"tag":"p","inner":"Para eso, simplemente tenemos que usar un hook que se llama \"UseQueryClient\", que también importamos desde ReactQuery. Con este objeto que tenemos aquí, podemos acceder en cualquier momento a lo que tenemos en la calle y modificarlo. Podemos hacer un montón de cosas. "},{"tag":"javascript","inner":"import { useQueryClient } from \"react-query\";\nimport { usePosts } from \"../hooks/posts\";\n\nexport default function Posts({ setPostId }) {\n  const queryClient = useQueryClient();\n  const {\n    data: posts,\n    error,\n    isLoading,\n    isFetching,\n    isIdle,\n    refetch,\n  } = usePosts();\n  ..."},{"tag":"p","inner":"Por ejemplo, si quiero que se vean los enlaces de una manera diferente en un color diferente, puedo llegar aquí a los enlaces y decirles que le voy a poner una clase llamada \"link-success\" para que se vean así en verde, pero solo para los que están en la calle, así que le diré que haga la consulta de la clave \"postId\", que es el identificador de este post, y lo cargaremos en esa clase. "},{"tag":"javascript","inner":"            <a\n              className={\n                queryClient.getQueryData([\"posts\", post.id]) && \"link-success\"\n              }\n              onClick={() => setPostId(post.id)}\n              href=\"#\"\n            >\n              {post.title}\n            </a>"},{"tag":"md","inner":"De esta manera tan simple, puedo llegar ahora y si visito uno de estos posts, verán que ya ese post está guardado en caché y me lo va a pintar de verde. "},{"tag":"p","inner":"Me parece que está buenísimo de esta manera, no tenemos que tener un estado global con Redux ni con Context, ninguna de estas librerías, ya que podemos acceder a ese estado de la calle desde cualquier componente y desde cualquier lugar.\n"},{"tag":"p","inner":"En las aplicaciones que hacemos en react, no solamente hacemos consultas del servidor, muchas veces necesitamos cambiar, actualizar o crear nuevos posts en el servidor. Eso es lo que es \"react\" y se llama las mutations."}]