[{"tag":"h1","inner":"isFetching"},{"tag":"p","inner":"Si quisiéramos mostrar al usuario un feedback para que sepa que algo está pasando en segundo plano, que estamos haciendo un refeching o una revalidación en segundo plano, podríamos hacerlo con un booleano que se llama isFetching. (linea 5)\n"},{"tag":"javascript","inner":"const { \n  data: posts, \n  error, \n  isLoading, \n  isFetching \n} = useQuery([\"posts\", getPosts])","lineNumber":"1"},{"tag":"p","inner":"Este isFetching  nosotros lo podriamos utilizarlo aquí, por ejemplo, le voy a poner aqui si isFetching  le voy a mostrar, por ejemplo, un spinner como el que tengo por aquí."},{"tag":"p","inner":"\nEntonces, cuando estamos haciendo una revalidación, el isLoading estará en \"true\", solamente en el loading inicial, pero después, cuando estamos haciendo una revalidación, lo que va a estar true va a ser “isFetching\". Por eso, podemos mostrar ese indicador. \n"},{"tag":"p","inner":"Ahora, fíjense por aquí, cuando montamos el componente, como podemos ver aquí, el componente \"post\" se desmontó. Si lo volvemos a montar, entonces se hace la revalidación y se muestra el spinner por el proceso en segundo plano."},{"tag":"p","inner":"Pero no solamente se hace cuando nosotros montamos el componente, sino además cuando nosotros movemos el foco hacia otro lugar y volvemos a poner el foco en esa pestaña."},{"tag":"p","inner":" Entonces se vuelve a hacer el refresco en background para ver, porque lo más probable es que si nosotros nos ponemos a trabajar en otras cosas y volvemos a nuestra pestaña, ya esos datos estén potencialmente superdesactualizados y querramos revalidarlos y traer los datos nuevos del servidor. "}]