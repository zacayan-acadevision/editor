[{"tag":"h1","inner":"Usage"},{"tag":"p","inner":"Usarlo es aún más simple, es lo que más me gusta a mí. Llego aquí, por ejemplo, donde dice Post y agarro y puedo comentar ahora todo este código que tenemos acá y con una sola línea de código ya vamos a resolver todo este tema y de una manera mucho mejor. Con un valor agregado muy grande. "},{"tag":"md","inner":"Le pongo aquí useQuery. Este hook que nosotros nos importamos desde React Query, como pueden ver acá… con este hook. Nada más, ahora le tenemos que pasar como primer parámetro un arreglo que va a tener la clave o las claves que van a identificar de forma única a esta consulta que nosotros estamos haciendo que le voy a poner \"post\"\nY como segundo parámetro le vamos a pasar una promesa que va a tener un resultado o lanzar un error. Esta promesa en este caso va a ser esta que es **getPosts**. Se la pasamos acá como segundo parámetro y listo, ya tenemos esto resuelto.\n"},{"tag":"javascript","inner":" const { data: posts, error, isLoading } = useQuery([\"posts\", getPosts])"},{"tag":"p","inner":"Este hook ahora nos va a traer a nosotros un objeto con toda la información de esta consulta. Le voy a poner aquí \"cosnt\" y voy a destructurar ese objeto. Voy a decir \"data\", error, isLoading. "},{"tag":"javascript","inner":"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport { useQuery } from \"react-query\";\nimport { getPosts } from \"../api/posts\";\n\nexport default function Posts({ setPostId }) {\n\n  const { data: posts, error, isLoading } = useQuery([\"posts\", getPosts])\n\n  if (isLoading) {\n    return (\n      <div>\n        <span className=\"spinner-border\"></span> Loading Posts...\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <section className=\"alert alert-danger\">\n        Error fetching posts: {error.message}\n      </section>\n    );\n  }\n\n  return (\n    <section>\n      <h2>Posts: {isFetching && <span className=\"spinner-border\"></span>}</h2>\n      <ul>\n        {posts.map((post) => (\n          <li key={post.id}>\n            <a\n              onClick={() => setPostId(post.id)}\n              href=\"#\"\n            >\n              {post.title}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n}\n"},{"tag":"md","inner":"Ahora vean cómo funciona esto. cuando nosotros montamos este componente en el DOM o lo cargamos, \"data\" y \"error\" van a estar en \"null\" y “isLoading” va a estar en true.\n\nUna vez que se obtenga un resultado satisfactorio, entonces, “isLoading” va a estar en falso, la data va a estar llena con los datos que vienen de esta promesa. \n\n\nAdemás, si tuviésemos un error, el error estaría en la variable error que se dispara cuando lanzamos esta promesa y la data va a estar en null. \n"}]