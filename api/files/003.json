[{"tag":"h1","inner":"Claves de consulta"},{"tag":"p","inner":"En esencia, React Query administra el almacenamiento en caché de consultas por usted en función de las claves de consulta. Las claves de consulta pueden ser tan simples como una cadena o tan complejas como una matriz de muchas cadenas y objetos anidados. Siempre que la clave de consulta sea serializable y única para los datos de la consulta, puede usarla"},{"tag":"h2","inner":"Claves de consulta de solo cadena"},{"tag":"p","inner":"La forma más simple de una clave en realidad no es una matriz, sino una cadena individual. Cuando se pasa una clave de consulta de cadena, se convierte en una matriz internamente con la cadena como único elemento de la clave de consulta. Este formato es útil para:"},{"tag":"md","inner":"- Recursos genéricos de lista/índice\n- Recursos no jerárquicos\n"},{"tag":"gdscript","inner":"// A list of todos\n useQuery('todos', ...) // queryKey === ['todos']\n \n // Something else, whatever!\n useQuery('somethingSpecial', ...) // queryKey === ['somethingSpecial']\n"},{"tag":"h2","inner":"Claves de matriz\n"},{"tag":"p","inner":"Cuando una consulta necesita más información para describir de forma exclusiva sus datos, puede utilizar una matriz con una cadena y cualquier número de objetos serializables para describirla. Esto es útil para:\n"},{"tag":"md","inner":"- Recursos jerárquicos o anidados\n - Es común pasar un ID, índice u otra primitiva para identificar de forma única el elemento.\n- Consultas con parámetros adicionales\n - Es común pasar un objeto de opciones adicionales\n"},{"tag":"gdscript","inner":"// An individual todo\n useQuery(['todo', 5], ...)\n // queryKey === ['todo', 5]\n \n // An individual todo in a \"preview\" format\n useQuery(['todo', 5, { preview: true }], ...)\n // queryKey === ['todo', 5, { preview: true }]\n \n // A list of todos that are \"done\"\n useQuery(['todos', { type: 'done' }], ...)\n // queryKey === ['todos', { type: 'done' }]\n"},{"tag":"h2","inner":"¡Las claves de consulta se cifran de forma determinista!\n\n"},{"tag":"p","inner":"Esto significa que independientemente del orden de las claves en los objetos, todas las consultas siguientes se consideran iguales:\n"},{"tag":"gdscript","inner":" useQuery(['todos', { status, page }], ...)\n useQuery(['todos', { page, status }], ...) \n useQuery(['todos', { page, status, other: undefined }], ...)\n"},{"tag":"p","inner":"Sin embargo, las siguientes claves de consulta no son iguales. ¡El orden de los elementos de la matriz importa!"},{"tag":"gdscript","inner":" useQuery(['todos', status, page], ...)\n useQuery(['todos', page, status], ...)\n useQuery(['todos', undefined, page, status], ...)"},{"tag":"h2","inner":"Si la función de consulta depende de una variable, inclúyala en la clave de consulta"},{"tag":"p","inner":"Dado que las claves de consulta describen de forma única los datos que están obteniendo, deben incluir cualquier variable que use en la función de consulta que cambie. Por ejemplo:"},{"tag":"gdscript","inner":" function Todos({ todoId }) {\n  const result = useQuery(['todos', todoId], () => fetchTodoById(todoId))\n }"},{"tag":"h2","inner":"Lecturas adicionales"},{"tag":"md","inner":"Para obtener consejos sobre cómo organizar claves de consulta en aplicaciones más grandes, eche un vistazo a **Effective React Query Keys** - *(https://react-query-v3.tanstack.com/community/tkdodos-blog#8-effective-react-query-keys)* de los Recursos de la Comunidad."},{"tag":"p","inner":""},{"tag":"p","inner":""}]