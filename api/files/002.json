[{"tag":"h1","inner":"Conceptos básicos de la consulta"},{"tag":"md","inner":"Una consulta es una dependencia declarativa de un origen asincrónico de datos que está vinculado a una **clave única**. Una consulta se puede utilizar con cualquier método basado en Promise (incluidos los métodos GET y POST) para obtener datos de un servidor. Si su método modifica datos en el servidor, se recomienda usar **Mutaciones** en su lugar.\n\nPara suscribirse a una consulta en sus componentes o enlaces personalizados, llame al enlace con al menos: (useQuery)\n\n- Una **clave única** para la consulta\n- Una función que devuelve una promesa que:\n - Resuelve los datos, o\n - Produce un error\n"},{"tag":"html","inner":"1 import { useQuery } from 'react-query'\n2\n3 function App() {\n4  const info = useQuery('todos', fetchTodoList)\n5 }\n"},{"tag":"md","inner":"La **clave única** que proporcione se usa internamente para volver a buscar, almacenar en caché y compartir las consultas en toda la aplicación.\n\nLos resultados de la consulta devueltos por contienen toda la información sobre la consulta que necesitará para la creación de plantillas y cualquier otro uso de los datos: (useQuery)\n"},{"tag":"html","inner":"const result = useQuery('todos', fetchTodoList)"},{"tag":"md","inner":"El objeto contiene algunos estados muy importantes que deberá tener en cuenta para ser productivo. Una consulta solo puede estar en uno de los siguientes estados en un momento dado: (result)\n\n- (isLoading) o bien: la consulta no tiene datos y se está recuperando actualmente (status === 'loading')\n\n- (isError) o - La consulta encontró un error (status === 'error')\n\n- (isSuccess) o - La consulta se realizó correctamente y los datos están disponibles (status === 'success')\n\n- (isIdle) o - La consulta está deshabilitada actualmente (aprenderá más sobre esto en un momento) (status === 'idle')\n\nMás allá de esos estados primarios, hay más información disponible dependiendo del estado de la consulta:\n\n- (error) - Si la consulta está en un estado, el error está disponible a través de la propiedad. (isError , error)\n- (data) - Si la consulta está en un estado, los datos están disponibles a través de la propiedad. (success , data)\n\n- (isFetching) - En cualquier estado, si la consulta se está recuperando en cualquier momento (incluida la recuperación en segundo plano) será . (isFetching , true)\n\nPara **la mayoría** de las consultas, generalmente es suficiente verificar el estado, luego el estado y, finalmente, asumir que los datos están disponibles y representar el estado correcto: (isLoading , isError)\n"},{"tag":"html","inner":"1 function Todos() {\n2  const { isLoading, isError, data, error } = useQuery('todos', fetchTodoList)\n3\n4  if (isLoading) {\n5    return <span>Loading...</span>\n6  }\n7\n8  if (isError) {\n9    return <span>Error: {error.message}</span>\n10  }\n11\n12  // We can assume by this point that `isSuccess === true`\n13  return (\n14    <ul>\n15      {data.map(todo => (\n16        <li key={todo.id}>{todo.title}</li>\n17      ))}\n18    </ul>\n19  )\n20 }\n"},{"tag":"md","inner":"Si los booleanos no son lo tuyo, siempre puedes usar el estado también: (status)"},{"tag":"html","inner":"1 function Todos() {\n2  const { status, data, error } = useQuery('todos', fetchTodoList)\n3\n4  if (status === 'loading') {\n5    return <span>Loading...</span>\n6  }\n7\n8  if (status === 'error') {\n9    return <span>Error: {error.message}</span>\n10  }\n11\n12  // also status === 'success', but \"else\" logic works, too\n13  return (\n14    <ul>\n15      {data.map(todo => (\n16        <li key={todo.id}>{todo.title}</li>\n17      ))}\n18    </ul>\n19  )\n20 }\n"},{"tag":"h2","inner":"Lecturas adicionales\n"},{"tag":"md","inner":"Para una forma alternativa de realizar comprobaciones de estado, eche un vistazo a los **Recursos de la comunidad.**\n"}]