[{"tag":"h1","inner":"Invalidación de mutaciones"},{"tag":"md","inner":"Invalidar consultas es solo la mitad de la batalla. Saber **cuándo** invalidarlos es la otra mitad. Por lo general, cuando una mutación en su aplicación tiene éxito, es MUY probable que haya consultas relacionadas en su aplicación que deban invalidarse y posiblemente recuperarse para tener en cuenta los nuevos cambios de su mutación.\n\nPor ejemplo, supongamos que tenemos una mutación para publicar una nueva tarea:\n"},{"tag":"html","inner":"const mutation = useMutation(postTodo)\n"},{"tag":"md","inner":"Cuando se produce una mutación correcta, es probable que queramos que todas las consultas se invaliden y posiblemente se vuelvan a buscar para mostrar el nuevo elemento de tareas pendientes. Para ello, puede utilizar las opciones de y la función de : (postTodo , todos , useMutation , onSuccess , client , invalidateQueries)"},{"tag":"html","inner":"1 import { useMutation, useQueryClient } from 'react-query'\n2\n3 const queryClient = useQueryClient()\n4\n5 // When this mutation succeeds, invalidate any queries with the `todos` or `reminders` query key\n6 const mutation = useMutation(addTodo, {\n7  onSuccess: () => {\n8    queryClient.invalidateQueries('todos')\n9    queryClient.invalidateQueries('reminders')\n10  },\n11 })\n"},{"tag":"md","inner":"Puede conectar sus invalidaciones para que ocurran usando cualquiera de las devoluciones de llamada disponibles en el **gancho** (useMutation)\n"}]