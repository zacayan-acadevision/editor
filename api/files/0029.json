[{"tag":"h1","inner":"¿React Query reemplaza a Redux, MobX u otros administradores de estado globales?"},{"tag":"p","inner":"Bueno, comencemos con algunos elementos importantes:"},{"tag":"md","inner":"- React Query es una biblioteca de estado del servidor, responsable de administrar las operaciones asíncronas entre su servidor y el cliente.\n- Redux, MobX, Zustand, etc. son bibliotecas de estado de cliente que se pueden usar para almacenar datos asincrónicos, aunque de manera ineficiente en comparación con una herramienta como React Query\n"},{"tag":"md","inner":"Con esos puntos en mente, la respuesta corta es que React Query reemplaza el código **repetitivo y el cableado relacionado utilizado para administrar los datos de caché en su estado de cliente y lo reemplaza con solo unas pocas líneas de código.**"},{"tag":"md","inner":"Para la gran mayoría de las aplicaciones, el **estado de cliente verdaderamente accesible globalmente** que queda después de migrar todo el código asincrónico a React Query suele ser muy pequeño."},{"tag":"md","inner":"Todavía hay algunas circunstancias en las que una aplicación puede tener una gran cantidad de estado sincrónico solo de cliente (como un diseñador visual o una aplicación de producción musical), en cuyo caso, probablemente aún querrá un administrador de estado de cliente. En esta situación, es importante tener en cuenta que **React Query no es un reemplazo para la administración de estado local/cliente.** Sin embargo, puede usar React Query junto con la mayoría de los administradores de estado de cliente con cero problemas."},{"tag":"h2","inner":"Un ejemplo artificial"},{"tag":"p","inner":"Aquí tenemos un estado \"global\" administrado por una biblioteca estatal global:"},{"tag":"gdscript","inner":"1 const globalState = {\n2  projects,\n3  teams,\n4  tasks,\n5  users,\n6  themeMode,\n7  sidebarStatus,\n8 }"},{"tag":"p","inner":"Actualmente, el administrador de estado global almacena en caché 4 tipos de estado de servidor: , , , y . Si tuviéramos que mover estos activos de estado de servidor a React Query, nuestro estado global restante se vería más así: (projects , teams , tasks , users)\n"},{"tag":"gdscript","inner":"1 const globalState = {\n2  themeMode,\n3  sidebarStatus,\n4 }"},{"tag":"p","inner":"Esto también significa que con unas pocas llamadas de enlace a y , también podemos eliminar cualquier código repetitivo que se utilizó para administrar el estado de nuestro servidor, por ejemplo. (useQuery , useMutation)"},{"tag":"md","inner":"- Conectores\n- Creadores de acciones\n- Middlewares\n- Reductores\n- Estados de carga/error/resultado\n- Contextos\n"},{"tag":"md","inner":"Con todas esas cosas eliminadas, puede preguntarse: **\"¿Vale la pena seguir usando nuestro administrador de estado del cliente para este pequeño estado global?\"**"},{"tag":"md","inner":"**¡Y eso depende de ti!**"},{"tag":"p","inner":"Pero el papel de React Query es claro. Elimina el cableado asincrónico y el repetitivo de su aplicación y lo reemplaza con solo unas pocas líneas de código."},{"tag":"p","inner":"¡Qué estás esperando, pruébalo ya!"}]