[{"tag":"h1","inner":"Precarga"},{"tag":"p","inner":"Si tiene la suerte, es posible que sepa lo suficiente sobre lo que harán sus usuarios para poder obtener previamente los datos que necesitan antes de que se necesiten. Si este es el caso, puede utilizar el método para obtener previamente los resultados de una consulta que se colocará en la memoria caché: (prefetchQuery)"},{"tag":"gdscript","inner":"1 const prefetchTodos = async () => {\n2  // The results of this query will be cached like a normal query\n3  await queryClient.prefetchQuery('todos', fetchTodos)\n4 }"},{"tag":"md","inner":"- Si los datos de esta consulta ya están en la memoria caché y no están invalidados, los datos no se recuperarán\n- Si se pasa un por ejemplo. y los datos son anteriores al **staleTime** especificado, se recuperará la consulta staleTime , **prefetchQuery('todos', fn, { staleTime: 5000 })**\n- Si no aparece ninguna instancia de para una consulta previamente cargada, se eliminará y se recogerá la basura después del tiempo especificado en . **useQuery , cacheTime**\n"},{"tag":"h2","inner":"Cebado manual de una consulta\n"},{"tag":"md","inner":"Como alternativa, si ya tiene disponibles los datos de la consulta de forma sincrónica, no es necesario que los obtenga previamente. Puede usar el método  **setQueryData** del cliente de consulta para agregar o actualizar directamente el resultado almacenado en caché de una consulta por clave."},{"tag":"md","inner":"**queryClient.setQueryData('todos', todos)**"}]