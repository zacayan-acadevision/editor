[{"tag":"h1","inner":"Reintentos de consulta\n"},{"tag":"md","inner":"Cuando se produce un error en una consulta (la función de consulta produce un error), React Query reintentará automáticamente la consulta si la solicitud de esa consulta no ha alcanzado el número máximo de reintentos consecutivos (el valor predeterminado es ) o si se proporciona una función para determinar si se permite un reintento. (useQuery , 3)\n\nPuede configurar reintentos tanto a nivel global como a nivel de consulta individual.\n\n- La configuración deshabilitará los reintentos. (retry = false)\n- La configuración reintentará las solicitudes fallidas 6 veces antes de mostrar el error final arrojado por la función. (retry = 6)\n- La configuración reintentará infinitamente las solicitudes fallidas. (retry = true)\n- La configuración permite una lógica personalizada basada en por qué se produjo un error en la solicitud. (retry = (failureCount, error) => ...)\n"},{"tag":"html","inner":"1 import { useQuery } from 'react-query'\n2\n3 // Make a specific query retry a certain number of times\n4 const result = useQuery(['todos', 1], fetchTodoListPage, {\n5  retry: 10, // Will retry failed requests 10 times before displaying an error\n6 })\n"},{"tag":"h2","inner":"Retraso de reintento\n"},{"tag":"md","inner":"De forma predeterminada, los reintentos en React Query no ocurren inmediatamente después de que falla una solicitud. Como es estándar, un retraso de retroceso se aplica gradualmente a cada intento de reintento.\n\nEl valor predeterminado se establece en el doble (a partir de ms) con cada intento, pero no exceder los 30 segundos: (retryDelay , 1000)\n"},{"tag":"html","inner":"1 // Configure for all queries\n2 import { QueryCache, QueryClient, QueryClientProvider } from 'react-query'\n3\n4 const queryClient = new QueryClient({\n5  defaultOptions: {\n6    queries: {\n7      retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\n8    },\n9  },\n10 })\n11\n12 function App() {\n13  return <QueryClientProvider client={queryClient}>...</QueryClientProvider>\n14 }\n"},{"tag":"md","inner":"Aunque no se recomienda, obviamente puede anular la función/entero tanto en el proveedor como en las opciones de consulta individuales. Si se establece en un entero en lugar de una función, el retraso siempre será la misma cantidad de tiempo: (retryDelay)"},{"tag":"html","inner":"1 const result = useQuery('todos', fetchTodoList, {\n2  retryDelay: 1000, // Will always wait 1000ms to retry, regardless of how many retries\n3 })"}]