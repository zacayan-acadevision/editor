[{"tag":"h1","inner":"Cancelación de consultas"},{"tag":"p","inner":"Método anterior que requiere una función de cancelación\n(https://react-query-v3.tanstack.com/guides/query-cancellation#old-cancel-function)"},{"tag":"md","inner":"React Query proporciona a cada función de consulta una instancia de AbortSignal, si está disponible en su entorno de ejecución. Cuando una consulta queda obsoleta o inactiva, se anulará. Esto significa que todas las consultas son cancelables, y puede responder a la cancelación dentro de su función de consulta si lo desea. La mejor parte de esto es que le permite continuar usando la sintaxis normal asincrónica / espera mientras obtiene todos los beneficios de la cancelación automática. Además, esta solución funciona mejor con TypeScript que la solución anterior. **signal**\n"},{"tag":"md","inner":"**NOTA:** Esta característica se introdujo en la versión . Si está utilizando una versión anterior, deberá actualizar (recomendado) o usar la función de cancelación anterior. 3.30.0"},{"tag":"h2","inner":"Comportamiento predeterminado"},{"tag":"p","inner":"De forma predeterminada, las consultas que se desmontan o dejan de usarse antes de que se resuelvan sus promesas no se cancelan. Esto significa que una vez resuelta la promesa, los datos resultantes estarán disponibles en la memoria caché. Esto es útil si ha comenzado a recibir una consulta, pero luego desmonta el componente antes de que finalice. Si vuelve a montar el componente y la consulta aún no se ha recopilado como elementos no utilizados, los datos estarán disponibles."},{"tag":"md","inner":"Sin embargo, si consume o adjunta una función a su Promesa, la Promesa se cancelará (por ejemplo, abortando la obtención) y, por lo tanto, también se debe cancelar la Consulta. Si cancela la consulta, su estado se revertirá a su estado anterior. **AbortSignal , cancel**"},{"tag":"h2","inner":"Usando fetch"},{"tag":"gdscript","inner":"1 const query = useQuery('todos', async ({ signal }) => {\n2  const todosResponse = await fetch('/todos', {\n3    // Pass the signal to one fetch\n4    signal,\n5  })\n6  const todos = await todosResponse.json()\n7\n8  const todoDetails = todos.map(async ({ details } => {\n9    const response = await fetch(details, {\n10      // Or pass it to several\n11      signal,\n12    })\n13    return response.json()\n14  })\n15\n16  return Promise.all(todoDetails)\n17 })"},{"tag":"h2","inner":"Usando axios\n"},{"tag":"md","inner":"**Uso de v0.22.0+ axios**"},{"tag":"gdscript","inner":"1 import axios from 'axios'\n2\n3 const query = useQuery('todos', ({ signal }) =>\n4  axios.get('/todos', {\n5    // Pass the signal to `axios`\n6    signal,\n7  })\n8 \n"},{"tag":"md","inner":"**Uso de una versión inferior a v0.22.0 axios**"},{"tag":"gdscript","inner":"1 import axios from 'axios'\n2\n3 const query = useQuery('todos', ({ signal }) => {\n4  // Create a new CancelToken source for this request\n5  const CancelToken = axios.CancelToken\n6  const source = CancelToken.source()\n7\n8  const promise = axios.get('/todos', {\n9    // Pass the source token to your request\n10    cancelToken: source.token,\n11  })\n12\n13  // Cancel the request if React Query signals to abort\n14  signal?.addEventListener('abort', () => {\n15    source.cancel('Query was cancelled by React Query')\n16  })\n17\n18  return promise\n19 })"},{"tag":"h2","inner":"Usando XMLHttpRequest"},{"tag":"gdscript","inner":"1 const query = useQuery('todos', ({ signal }) => {\n2  return new Promise((resolve, reject) => {\n3    var oReq = new XMLHttpRequest()\n4    oReq.addEventListener('load', () => {\n5      resolve(JSON.parse(oReq.responseText))\n6    })\n7    signal?.addEventListener('abort', () => {\n8      oReq.abort()\n9      reject()\n10    })\n11    oReq.open('GET', '/todos')\n12    oReq.send()\n13  })\n14 })"},{"tag":"h2","inner":"Usando graphql-request"},{"tag":"gdscript","inner":"1 const client = new GraphQLClient(endpoint)\n2\n3 const query = useQuery('todos', ({ signal }) => {\n4  client.request({ document: query, signal })\n5 })"},{"tag":"h2","inner":"Uso de una versión inferior a v4.0.0 graphql-request"},{"tag":"md","inner":"Se puede establecer un valor en el constructor. **AbortSignal , GraphQLClient**"},{"tag":"gdscript","inner":"1 const query = useQuery('todos', ({ signal }) => {\n2  const client = new GraphQLClient(endpoint, {\n3    signal,\n4  });\n5  return client.request(query, variables)\n6 })"},{"tag":"h2","inner":"Cancelación manual"},{"tag":"md","inner":"Es posible que desee cancelar una consulta manualmente. Por ejemplo, si la solicitud tarda mucho tiempo en finalizar, puede permitir que el usuario haga clic en un botón Cancelar para detener la solicitud. Para ello, solo tiene que llamar a , que cancelará la consulta y la revertirá a su estado anterior. Si está disponible, o ha consumido la función pasada a la consulta, **React Query también cancelará la Promesa. queryClient.cancelQueries(key) , promise.cancel , signal**\n"},{"tag":"gdscript","inner":"1 const [queryKey] = useState('todos')\n2\n3 const query = useQuery(queryKey, async ({ signal }) => {\n4  const resp = await fetch('/todos', { signal })\n5  return resp.json()\n6 })\n7\n8 const queryClient = useQueryClient()\n9\n10 return (\n11  <button onClick={(e) => {\n12    e.preventDefault()\n13    queryClient.cancelQueries(queryKey)\n14   }}>Cancel</button>\n15 )"},{"tag":"h2","inner":"Función antigua cancel"},{"tag":"p","inner":"¡No te preocupes! La funcionalidad de cancelación anterior seguirá funcionando. Pero le recomendamos que se aleje de la propuesta de promesa.1 cancelable retirada a la nueva interfaz.2 AbortSignal, que se ha estandarizado.3 como una construcción de propósito general para abortar las actividades en curso en la mayoría.4 de los navegadores y en Node.5. La antigua función de cancelación podría eliminarse en una futura versión principal.\n"},{"tag":"md","inner":"- 1.(https://github.com/tc39/proposal-cancelable-promises)\n- 2.(https://react-query-v3.tanstack.com/guides/query-cancellation#_top)\n- 3.(https://dom.spec.whatwg.org/#interface-abortcontroller)\n- 4.(https://caniuse.com/abortcontroller)\n- 5.(https://nodejs.org/api/globals.html#globals_class_abortsignal)\n\n"},{"tag":"md","inner":"To integrate with this feature, attach a function to the promise returned by your query that implements your request cancellation. When a query becomes out-of-date or inactive, this function will be called (if available). **cancel , promise.cancel**\n\n"},{"tag":"h2","inner":"Using with function axios , cancel\n"},{"tag":"gdscript","inner":"1 import axios from 'axios'\n2\n3 const query = useQuery('todos', () => {\n4  // Create a new CancelToken source for this request\n5  const CancelToken = axios.CancelToken\n6  const source = CancelToken.source()\n7\n8  const promise = axios.get('/todos', {\n9    // Pass the source token to your request\n10    cancelToken: source.token,\n11  })\n12\n13  // Cancel the request if React Query calls the `promise.cancel` method\n14  promise.cancel = () => {\n15    source.cancel('Query was cancelled by React Query')\n16  }\n17\n18  return promise\n19 })"},{"tag":"h2","inner":"Uso con función fetch , cancel"},{"tag":"gdscript","inner":"1 const query = useQuery('todos', () => {\n2  // Create a new AbortController instance for this request\n3  const controller = new AbortController()\n4  // Get the abortController's signal\n5  const signal = controller.signal\n6\n7  const promise = fetch('/todos', {\n8    method: 'get',\n9    // Pass the signal to your request\n10    signal,\n11  })\n12\n13  // Cancel the request if React Query calls the `promise.cancel` method\n14  promise.cancel = () => controller.abort()\n15\n16  return promise\n17 })"}]