[{"tag":"h1","inner":"Cuales son las deficiencias del este enfoque"},{"tag":"p","inner":"Ahora, ¿cuáles son las deficiencias que tiene esto? En primer lugar, tenemos que entender que cuando utilizamos el estado del servidor, también hacemos una copia en el lado del cliente en nuestro estado local."},{"tag":"p","inner":"Pero el servidor puede estar siendo utilizado por muchísimos clientes al mismo tiempo. Por lo tanto, es muy probable que los datos del servidor puedan estar desactualizados, o por lo menos, lo que estamos mostrando al usuario puede haber cambiado en el lado del servidor.\n"},{"tag":"p","inner":"Lo otro también es que cada vez que navegamos a una ruta, tenemos que estar viendo estos loaders. Por que en este efecto, cada vez que montamos el componente, traemos los datos del servidor. Y eso no está bien, porque lo mejor es tener algún tipo de mecanismo de caché para no tener que estar mostrando los loaders constantemente al usuario, ya que pueden resultar muy irritantes."},{"tag":"p","inner":"Además de compartir el estado con el resto de los componentes, es un reto interesante. Por lo general, terminamos utilizando librerías como Redux o Context, como vemos en el estado hacia un ancestro superior, y lo compartimos hacia todos los hijos mediante props, haciendo el famoso prop drilling. Pero todo esto se resuelve de una manera elegante utilizando una hermosa librería llamada React Query. "}]