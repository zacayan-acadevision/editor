[{"tag":"h1","inner":"Valores predeterminados importantes"},{"tag":"md","inner":"Fuera de la caja, React Query está configurado con valores predeterminados **agresivos pero sensatos. A veces, estos valores predeterminados pueden tomar por sorpresa a los nuevos usuarios o dificultar el aprendizaje / depuración si el usuario los desconoce.** Tenlos en cuenta a medida que continúas aprendiendo y usando React Query:"},{"tag":"md","inner":"- Las instancias de consulta a través o de forma predeterminada consideran los datos almacenados en caché como obsoletos. (useQuery , useInfiniteQuery)"},{"tag":"md","inner":"- Las consultas obsoletas se vuelven a recuperar automáticamente en segundo plano cuando:\n - Nuevas instancias del montaje de consulta\n - La ventana se reenfoca\n - La red se vuelve a conectar.\n - La consulta se configura opcionalmente con un intervalo de recuperación.\n"},{"tag":"md","inner":"Si ve una recuperación que no espera, es probable que se deba a que acaba de enfocar la ventana y React Query está haciendo un archivo . Durante el desarrollo, esto probablemente se activará con más frecuencia, especialmente porque centrarse entre las DevTools del navegador y su aplicación también causará una recuperación, así que tenga en cuenta eso. (refetchOnWindowFocus)"},{"tag":"md","inner":"*Para cambiar esta funcionalidad, puede utilizar opciones como , , y (.refetchOnMount , refetchOnWindowFocus , refetchOnReconnect , refetchInterval)*"},{"tag":"md","inner":"- Los resultados de consulta que no tienen más instancias activas de , o los observadores de consulta se etiquetan como \"inactivos\" y permanecen en la memoria caché en caso de que se vuelvan a usar más adelante. useQuery , useInfiniteQuery\n- De forma predeterminada, las consultas \"inactivas\" son basura recopilada después de 5 minutos."},{"tag":"md","inner":"*Para cambiar esto, puede modificar el valor predeterminado para las consultas a algo que no sea milisegundos. (cacheTime , 1000 * 60 * 5)*"},{"tag":"md","inner":"- Las consultas que fallan se **vuelven a intentar silenciosamente 3 veces, con un retraso exponencial de retroceso** antes de capturar y mostrar un error en la interfaz de usuario."},{"tag":"md","inner":"*Para cambiar esto, puede modificar el valor predeterminado y las opciones para las consultas a algo que no sea y la función de retroceso exponencial predeterminada. (retry , retryDelay , 3)*"},{"tag":"md","inner":"- Los resultados de la consulta de forma predeterminada se **comparten estructuralmente para detectar si los datos realmente han cambiado y, de lo contrario, la referencia de datos permanece sin cambios** para ayudar mejor con la estabilización del valor con respecto a useMemo y useCallback. Si este concepto suena extraño, ¡entonces no te preocupes por eso! El 99.9% del tiempo no necesitará deshabilitar esto y hace que su aplicación sea más eficiente a un costo cero para usted."},{"tag":"md","inner":"*El uso compartido estructural solo funciona con valores compatibles con JSON, cualquier otro tipo de valor siempre se considerará cambiado. Si ve problemas de rendimiento debido a respuestas grandes, por ejemplo, puede deshabilitar esta función con el indicador. Si está tratando con valores no compatibles con JSON en las respuestas de consulta y aún desea detectar si los datos han cambiado o no, puede definir una función de comparación de datos con . (config.structuralSharing , config.isDataEqual)*"},{"tag":"h2","inner":"Lecturas adicionales"},{"tag":"p","inner":"Echa un vistazo a los siguientes artículos de nuestros Recursos de la comunidad para obtener más explicaciones de los valores predeterminados:"},{"tag":"md","inner":"- Consulta práctica de React - *https://react-query-v3.tanstack.com/community/tkdodos-blog#1-practical-react-query*\n- React Query como administrador de estado - *https://react-query-v3.tanstack.com/community/tkdodos-blog#10-react-query-as-a-state-manager*\n"}]