[{"tag":"h1","inner":"Visi√≥n general"},{"tag":"md","inner":"React Query a menudo se describe como la biblioteca de b√∫squeda de datos que falta para React, pero en t√©rminos m√°s t√©cnicos, hace que **buscar, almacenar en cach√©, sincronizar y actualizar el estado del servidor** en sus aplicaciones de React sea muy f√°cil."},{"tag":"h2","inner":"Motivaci√≥n"},{"tag":"md","inner":"Fuera de la caja, las aplicaciones de React **no** vienen con una forma obstinada de obtener o actualizar datos de sus componentes, por lo que los desarrolladores terminan construyendo sus propias formas de obtener datos. Esto generalmente significa improvisar el estado y el efecto basados en componentes utilizando ganchos de React, o usar bibliotecas de administraci√≥n de estado de prop√≥sito m√°s general para almacenar y proporcionar datos as√≠ncronos en todas sus aplicaciones."},{"tag":"md","inner":"Aunque la mayor√≠a de las bibliotecas de administraci√≥n de estado tradicionales son excelentes para trabajar con el estado del cliente, **no son tan buenas para trabajar con el estado asincr√≥nico o del servidor**. Esto se debe a que **el estado del servidor es totalmente diferente**. Para empezar, estado del servidor:"},{"tag":"md","inner":"- Se conserva de forma remota en una ubicaci√≥n que no controla ni es de su propiedad\n- Requiere API asincr√≥nicas para obtener y actualizar\n- Implica propiedad compartida y puede ser cambiado por otras personas sin su conocimiento\n- Puede potencialmente volverse \"desactualizado\" en sus aplicaciones si no tiene cuidado\n"},{"tag":"md","inner":"- Cach√©... (posiblemente lo m√°s dif√≠cil de hacer en programaci√≥n)\n- Duplicaci√≥n de varias solicitudes para los mismos datos en una sola solicitud\n- Actualizaci√≥n de datos \"desactualizados\" en segundo plano\n- Saber cu√°ndo los datos est√°n \"desactualizados\"\n- Reflejar las actualizaciones de los datos lo m√°s r√°pido posible\n- Optimizaciones de rendimiento como paginaci√≥n y carga diferida de datos\n- Administraci√≥n de la memoria y la recolecci√≥n de elementos no utilizados del estado del servidor\n- Memorizaci√≥n de los resultados de la consulta con el uso compartido estructural\n"},{"tag":"md","inner":"Si no est√° abrumado por esa lista, entonces eso debe significar que probablemente ya haya resuelto todos los problemas de estado de su servidor y merezca un premio. Sin embargo, si usted es como la gran mayor√≠a de las personas, a√∫n tiene que abordar todos o la mayor√≠a de estos desaf√≠os y ¬°solo estamos ara√±ando la superficie!"},{"tag":"md","inner":"En una nota m√°s t√©cnica, React Query probablemente podr√°:\n\n- Le ayuda a eliminar **muchas** l√≠neas de c√≥digo complicado y mal entendido de su aplicaci√≥n y reemplazarlo con solo un pu√±ado de l√≠neas de l√≥gica de React Query.\n- Haga que su aplicaci√≥n sea m√°s f√°cil de mantener y m√°s f√°cil de crear nuevas caracter√≠sticas sin preocuparse por cablear nuevos or√≠genes de datos de estado del servidor\n- Tenga un impacto directo en sus usuarios finales haciendo que su aplicaci√≥n se sienta m√°s r√°pida y con mayor capacidad de respuesta que nunca.\n- Potencialmente le ayudar√° a ahorrar ancho de banda y aumentar el rendimiento de la memoria\n"},{"tag":"h2","inner":"¬°Basta de hablar, mu√©strame un poco de c√≥digo ya!"},{"tag":"p","inner":"En el siguiente ejemplo, puede ver React Query en su forma m√°s b√°sica y simple que se utiliza para obtener las estad√≠sticas de GitHub para el proyecto GitHub de React Query en s√≠:"},{"tag":"javascript","inner":"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider, useQuery } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport axios from \"axios\";\n\nconst queryClient = new QueryClient();\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Example />\n    </QueryClientProvider>\n  );\n}\n\nfunction Example() {\n  const { isLoading, error, data, isFetching } = useQuery(\"repoData\", () =>\n    axios.get(\n      \"https://api.github.com/repos/tannerlinsley/react-query\"\n    ).then((res) => res.data)\n  );\n\n  if (isLoading) return \"Loading...\";\n\n  if (error) return \"An error has occurred: \" + error.message;\n\n  return (\n    <div>\n      <h1>{data.name}</h1>\n      <p>{data.description}</p>\n      <strong>üëÄ {data.subscribers_count}</strong>{\" \"}\n      <strong>‚ú® {data.stargazers_count}</strong>{\" \"}\n      <strong>üç¥ {data.forks_count}</strong>\n      <div>{isFetching ? \"Updating...\" : \"\"}</div>\n      <ReactQueryDevtools initialIsOpen />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n","lineNumber":"1"},{"tag":"p","inner":"Como puedes ver se trata de una libreria que se instala a nivel global.","lineNumber":"1"},{"tag":"javascript","inner":"import { QueryClient, QueryClientProvider, useQuery } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";","lineNumber":"4"},{"tag":"javascript","inner":"const queryClient = new QueryClient();\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Example />\n    </QueryClientProvider>\n  );\n}","lineNumber":"10"},{"tag":"md","inner":"Que permite generar 4 variables relacionadas al estado de una api con una sola instruccion. **useQuery**","lineNumber":"1"},{"tag":"javascript","inner":"const { isLoading, error, data, isFetching } = useQuery(\"repoData\", () =>\n","lineNumber":"19"}]