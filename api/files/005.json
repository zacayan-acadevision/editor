[{"tag":"h1","inner":"Consultas paralelas"},{"tag":"p","inner":"Las consultas \"paralelas\" son consultas que se ejecutan en paralelo o al mismo tiempo para maximizar la obtención de simultaneidad."},{"tag":"h2","inner":"Consultas paralelas manuales"},{"tag":"md","inner":"Cuando el número de consultas paralelas no cambia, no hay **ningún esfuerzo adicional** para usar consultas paralelas. ¡Simplemente use cualquier número de React Query y ganchos uno al lado del otro! (useQuery , useInfiniteQuery)."},{"tag":"gdscript","inner":"function App () {\n  // The following queries will execute in parallel\n  const usersQuery = useQuery('users', fetchUsers)\n  const teamsQuery = useQuery('teams', fetchTeams) \n const projectsQuery = useQuery('projects', fetchProjects)\n  ...\n }\n"},{"tag":"p","inner":"Cuando se usa React Query en modo suspenso, este patrón de paralelismo no funciona, ya que la primera consulta arrojaría una promesa internamente y suspendería el componente antes de que se ejecuten las otras consultas. Para evitar esto, deberá usar el gancho (que se sugiere) u orquestar su propio paralelismo con componentes separados para cada instancia (que es cojo). (useQueries , useQuery)"},{"tag":"p","inner":"(useQueries) Acepta una matriz de objetos de opciones de consulta y devuelve una matriz de resultados de consulta:"},{"tag":"gdscript","inner":"function App({ users }) {\n  const userQueries = useQueries(\n    users.map(user => {\n      return {\n        queryKey: ['user', user.id],\n       queryFn: () => fetchUserById(user.id),\n     }\n })\n  )\n }"}]