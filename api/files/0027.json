[{"tag":"h1","inner":"Suspense"},{"tag":"p","inner":"NOTA: El modo de suspenso para React Query es experimental, igual que el modo de suspenso para la obtención de datos. Estas API CAMBIARÁN y no deben usarse en producción a menos que bloquee sus versiones de React y React Query en versiones de nivel de parche que sean compatibles entre sí."},{"tag":"p","inner":"React Query también se puede usar con las nuevas API de Suspense for Data Fetching de React. Para habilitar este modo, puede establecer la opción de configuración de nivel global o de consulta en . suspense , true"},{"tag":"p","inner":"Configuración global:"},{"tag":"gdscript","inner":"1 // Configure for all queries\n2 import { QueryClient, QueryClientProvider } from 'react-query'\n3\n4 const queryClient = new QueryClient({\n5  defaultOptions: {\n6    queries: {\n7      suspense: true,\n8    },\n9  },\n10 })\n11\n12 function Root() {\n13  return (\n14    <QueryClientProvider client={queryClient}>\n15      <App />\n16    </QueryClientProvider>\n17  )\n18 }"},{"tag":"p","inner":"Configuración de consulta:"},{"tag":"gdscript","inner":"1 import { useQuery } from 'react-query'\n2\n3 // Enable for an individual query\n4 useQuery(queryKey, queryFn, { suspense: true })"},{"tag":"p","inner":"Cuando se usa el modo de suspenso, los estados y los objetos no son necesarios y luego se reemplazan por el uso del componente (incluido el uso de los límites de error prop y React para detectar errores). Lea Restablecimiento de límites de error y consulte el Ejemplo de suspenso para obtener más información sobre cómo configurar el modo de suspenso. status , error , React.Suspense , fallback"},{"tag":"p","inner":"Además de que las consultas se comportan de manera diferente en el modo de suspenso, las mutaciones también se comportan de manera un poco diferente. De forma predeterminada, en lugar de proporcionar la variable cuando se produce un error en una mutación, se lanzará durante la siguiente representación del componente en el que se usa y se propagará al límite de error más cercano, de forma similar a los errores de consulta. Si desea desactivar esta opción, puede establecer la opción en . Si desea que los errores no se arrojen en absoluto, ¡también puede configurar la opción! error , useErrorBoundary , false , throwOnError , false"},{"tag":"h2","inner":"Restablecimiento de límites de error"},{"tag":"p","inner":"Tanto si usa suspenso como ErrorBoundaries en las consultas, necesitará una forma de informar a las consultas de que desea volver a intentarlo cuando vuelva a renderizarse después de que se haya producido algún error."},{"tag":"p","inner":"Los errores de consulta se pueden restablecer con el componente o con el gancho. QueryErrorResetBoundary , useQueryErrorResetBoundary"},{"tag":"p","inner":"Al utilizar el componente, restablecerá cualquier error de consulta dentro de los límites del componente:"},{"tag":"gdscript","inner":"1 import { QueryErrorResetBoundary } from 'react-query'\n2 import { ErrorBoundary } from 'react-error-boundary'\n3\n4 const App: React.FC = () => (\n5  <QueryErrorResetBoundary>\n6    {({ reset }) => (\n7      <ErrorBoundary\n8        onReset={reset}\n9        fallbackRender={({ resetErrorBoundary }) => (\n10          <div>\n11            There was an error!\n12            <Button onClick={() => resetErrorBoundary()}>Try again</Button>\n13          </div>\n14        )}\n15      >\n16        <Page />\n17      </ErrorBoundary>\n18    )}\n19  </QueryErrorResetBoundary>\n20 )\n"},{"tag":"p","inner":"Al usar el gancho, restablecerá cualquier error de consulta dentro del archivo . Si no hay ningún límite definido, los restablecerá globalmente: QueryErrorResetBoundary"},{"tag":"gdscript","inner":"1 import { useQueryErrorResetBoundary } from 'react-query'\n2 import { ErrorBoundary } from 'react-error-boundary'\n3\n4 const App: React.FC = () => {\n5  const { reset } = useQueryErrorResetBoundary()\n6  return (\n7    <ErrorBoundary\n8      onReset={reset}\n9      fallbackRender={({ resetErrorBoundary }) => (\n10        <div>\n11          There was an error!\n12          <Button onClick={() => resetErrorBoundary()}>Try again</Button>\n13        </div>\n14      )}\n15    >\n16      <Page />\n17    </ErrorBoundary>\n18  )\n19 }"},{"tag":"h2","inner":"Fetch-on-render vs Render-as-you-fetch"},{"tag":"p","inner":"Fuera de la caja, React Query en modo funciona muy bien como una solución de fetch-on-render sin configuración adicional. Esto significa que cuando los componentes intenten montarse, activarán la búsqueda de consultas y la suspenderán, pero solo una vez que los haya importado y montado. Si desea llevarlo al siguiente nivel e implementar un modelo de renderizado como recuperación, le recomendamos implementar la captura previa en las devoluciones de llamada de enrutamiento y / o eventos de interacciones del usuario para comenzar a cargar consultas antes de que se monten y, con suerte, incluso antes de comenzar a importar o montar sus componentes principales. suspense\n"}]