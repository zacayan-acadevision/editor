[{"tag":"h1","inner":"Invalidación de consultas"},{"tag":"md","inner":"Start...\n"},{"tag":"md","inner":"Esperar a que las consultas se vuelvan obsoletas antes de que se vuelvan a recuperar no siempre funciona, especialmente cuando se sabe a ciencia cierta que los datos de una consulta están desactualizados debido a algo que el usuario ha hecho. Para ese propósito, el tiene un método que le permite marcar inteligentemente las consultas como obsoletas y potencialmente recuperarlas también. **QueryClient , invalidateQueries**"},{"tag":"gdscript","inner":"1 // Invalidate every query in the cache\n2 queryClient.invalidateQueries()\n3 // Invalidate every query with a key that starts with `todos`\n4 queryClient.invalidateQueries('todos')"},{"tag":"md","inner":"Nota: Donde otras bibliotecas que usan cachés normalizadas intentarían actualizar las consultas locales con los nuevos datos, ya sea imperativamente o mediante inferencia de esquema, React Query le brinda las herramientas para evitar el trabajo manual que conlleva el mantenimiento de cachés normalizados y, en su lugar, prescribe la **invalidación dirigida, la recuperación en segundo plano y, en última instancia, las actualizaciones atómicas.**"},{"tag":"md","inner":"Cuando se invalida una consulta con , suceden dos cosas: **invalidateQueries**"},{"tag":"md","inner":"- Está marcado como rancio. Este estado obsoleto anula cualquier configuración que se use en o enlaces relacionados **staleTime , useQuery**\n- Si la consulta se está representando actualmente a través de enlaces relacionados, también se volverá a recuperar en segundo plano **useQuery**"},{"tag":"h2","inner":"Coincidencia de consultas con invalidateQueries"},{"tag":"md","inner":"Al usar API como y (y otras que admiten la coincidencia parcial de consultas), puede hacer coincidir varias consultas por su prefijo, o ser realmente específico y hacer coincidir una consulta exacta. Para obtener información sobre los tipos de filtros que puede utilizar, consulte Filtros de consulta. **invalidateQueries , removeQueries**\nEn este ejemplo, podemos usar el prefijo para invalidar cualquier consulta que comience con en su clave de consulta: todos , todos"},{"tag":"gdscript","inner":"1 import { useQuery, useQueryClient } from 'react-query'\n2\n3 // Get QueryClient from the context\n4 const queryClient = useQueryClient()\n5\n6 queryClient.invalidateQueries('todos')\n7\n8 // Both queries below will be invalidated\n9 const todoListQuery = useQuery('todos', fetchTodoList)\n10 const todoListQuery = useQuery(['todos', { page: 1 }], fetchTodoList)\n"},{"tag":"md","inner":"Incluso puede invalidar consultas con variables específicas pasando una clave de consulta más específica al método: **invalidateQueries**\n"},{"tag":"gdscript","inner":"1 queryClient.invalidateQueries(['todos', { type: 'done' }])\n2\n3 // The query below will be invalidated\n4 const todoListQuery = useQuery(['todos', { type: 'done' }], fetchTodoList)\n5\n6 // However, the following query below will NOT be invalidated\n7 const todoListQuery = useQuery('todos', fetchTodoList)"},{"tag":"md","inner":"La API es muy flexible, por lo que incluso si solo desea invalidar las consultas que no tienen más variables o subclaves, puede pasar una opción al método: **invalidateQueries , todos , exact: true , invalidateQueries**"},{"tag":"gdscript","inner":"1 queryClient.invalidateQueries('todos', { exact: true })\n2\n3 // The query below will be invalidated\n4 const todoListQuery = useQuery(['todos'], fetchTodoList)\n5\n6 // However, the following query below will NOT be invalidated\n7 const todoListQuery = useQuery(['todos', { type: 'done' }], fetchTodoList)"},{"tag":"md","inner":"Si desea aún más granularidad, puede pasar una función de predicado al método. Esta función recibirá cada instancia de la caché de consulta y le permitirá devolver o para si desea invalidar esa consulta: **invalidateQueries , Query , true , false**"},{"tag":"gdscript","inner":"1 queryClient.invalidateQueries({\n2  predicate: query =>\n3    query.queryKey[0] === 'todos' && query.queryKey[1]?.version >= 10,\n4 })\n5\n6 // The query below will be invalidated\n7 const todoListQuery = useQuery(['todos', { version: 20 }], fetchTodoList)\n8\n9 // The query below will be invalidated\n10 const todoListQuery = useQuery(['todos', { version: 10 }], fetchTodoList)\n11\n12 // However, the following query below will NOT be invalidated\n13 const todoListQuery = useQuery(['todos', { version: 5 }], fetchTodoList)"}]