[{"tag":"h1","inner":"Actualizaciones de Mutation Responses"},{"tag":"md","inner":"Cuando se trata de mutaciones que actualizan objetos en el servidor, es común que el nuevo objeto se devuelva automáticamente en respuesta a la mutación. En lugar de volver a buscar cualquier consulta para ese elemento y desperdiciar una llamada de red para los datos que ya tenemos, podemos aprovechar el objeto devuelto por la función de mutación y actualizar la consulta existente con los nuevos datos inmediatamente utilizando el método **setQueryData** del cliente de consulta:"},{"tag":"gdscript","inner":"1 const queryClient = useQueryClient()\n2\n3 const mutation = useMutation(editTodo, {\n4  onSuccess: data => {\n5    queryClient.setQueryData(['todo', { id: 5 }], data)\n6  }\n7 })\n8\n9 mutation.mutate({\n10  id: 5,\n11  name: 'Do the laundry',\n12 })\n13\n14 // The query below will be updated with the response from the\n15 // successful mutation\n16 const { status, data, error } = useQuery(['todo', { id: 5 }], fetchTodoById)"},{"tag":"md","inner":"Es posible que desee vincular la lógica a una mutación reutilizable, para eso puede Crea un gancho personalizado como este: **onSuccess**"},{"tag":"gdscript","inner":"1 const useMutateTodo = () => {\n2  const queryClient = useQueryClient()\n3\n4  return useMutation(editTodo, {\n5    // Notice the second argument is the variables object that the `mutate` function receives\n6    onSuccess: (data, variables) => {\n7      queryClient.setQueryData(['todo', { id: variables.id }], data)\n8    },\n9  })\n10 }\n"}]