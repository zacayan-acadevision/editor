[{"tag":"h1","inner":"Retries"},{"tag":"p","inner":"Por acá lo otro que también es muy útil es el tema de que por defecto, reactQuery, si tenemos un error, va a hacer tres reintentos antes de ponerse en estado de error. "},{"tag":"p","inner":"Si agarro aquí el tiempo y luego lo activo, voy a cortar aquí la consulta y decirle que el servidor se cayó, veamos que si ejecuto esto, va a estar en error, pero voy a abrir las herramientas de desarrollador para que vean que se van a hacer tres reintentos antes de mostrar el mensaje de error. \n"},{"tag":"p","inner":"Aquí dice \"post post post\", y a los tres reintentos es que entonces te muestra el mensaje de error. Cada uno de esos intentos se hace con un tiempo de retardo un poco mayor, para tratar de traer los datos del servidor de cualquier manera, si no están disponibles en un momento. Puedes hacer varios intentos antes de decir que hubo un error. Porque al usuario generalmente no le gusta ver errores."},{"tag":"md","inner":"Entonces aquí podríamos también configurarlo. Podríamos decirle a **retry** que intente una sola vez en lugar de tres. Ahora, cuando refresquemos aquí, solo intentará una vez antes de darte un error. De esta manera, no tenemos que esperar tanto para ver el error."},{"tag":"javascript","inner":"  const {\n    data: posts,\n    error,\n    isLoading,\n    isFetching,\n    isIdle\n  } = useQuery([\"posts\", getPosts, {\n    retry: 1 // un solo reintento\n  }])"},{"tag":"md","inner":"También podemos poner **retry** en falso para que nunca se intente. "},{"tag":"javascript","inner":"  const {\n    data: posts,\n    error,\n    isLoading,\n    isFetching,\n    isIdle\n  } = useQuery([\"posts\", getPosts, {\n    retry: false //sin reintentos\n  }])"},{"tag":"md","inner":"O también podríamos configurar el **retryDelay** para decirle específicamente cuánto tiempo queremos que espere entre un intento y otro. "},{"tag":"javascript","inner":"  const {\n    data: posts,\n    error,\n    isLoading,\n    isFetching,\n    isIdle\n  } = useQuery([\"posts\", getPosts, {\n    retry: 1 // un solo reintento\n    retryDelay: 1000 // un segundo de espera entre reintentos\n  }])"},{"tag":"p","inner":"En este caso, esperaré un segundo. Pero estas son configuraciones que se pueden hacer. Así podrán ver que esto está súper bien pensado y súper personalizable."},{"tag":"javascript","inner":"  const {\n    data: posts,\n    error,\n    isLoading,\n    isFetching,\n    isIdle\n  } = useQuery([\"posts\", getPosts, {\n    retry: 1 // un solo reintento\n    retryDelay: 1000 // un segundo de espera entre reintentos\n  }])"}]