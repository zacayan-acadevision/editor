[{"tag":"h1","inner":"Delay queries"},{"tag":"p","inner":" También es interesante que muchas veces no queremos que las consultas se ejecuten cuando montamos un componente. A veces queremos que estén deshabilitadas y se ejecuten cuando presionamos un botón o algo así. \n"},{"tag":"p","inner":"\nSi quieren hacer eso, simplemente ponen \"enabled\" en \"false\" y verán que esa consulta no se ejecuta cuando el componente se carga por primera vez. Si queremos saber que está deshabilitada, eso se llama \"isIdle\". \n"},{"tag":"javascript","inner":"  const {\n    data: posts,\n    error,\n    isLoading,\n    isFetching,\n    isIdle,\n    refetch\n  } = useQuery([\"posts\", getPosts, {\n    enabled: false //tres segundos \n  }])"},{"tag":"p","inner":"\nPodría llegar aquí abajo, por ejemplo, y decirle \"si está deshabilitado, entonces vamos a retornar un botón que va a decir \"page post\". Verán que tenemos ese botón aquí abajo porque la consulta está deshabilitada. \n"},{"tag":"javascript","inner":"  if (isIdle) {\n    return <button onClick={refetch}>Fetch Post</button>\n  }"},{"tag":"p","inner":"Podría tomar el clic de este botón y decirle que, cuando lo presione, haga la fetch. Para eso, usamos la función \"refetch\". La función \"refetch\" es para programáticamente ejecutar la consulta. Llego aquí y le digo a este botón cuando hagan clic, vamos a hacer ese riff programáticamente y veremos que la primera vez que se cargue el componente no se va a mostrar nada, sólo la consulta, pero después podemos empezar todo esto presionando este botón y ejecutando las consultas refeth."},{"tag":"p","inner":"Esto es muy útil, sobre todo si quieren ejecutar consultas, por ejemplo, en una barra de búsqueda, donde la consulta se ejecuta al presionar el botón de buscar, o cuando tienen consultas que dependen una de otra, en ese caso pueden deshabilitar la consulta dependiente hasta que la consulta anterior haya tenido una respuesta y se tenga un identificador o lo que sea necesario para la siguiente consulta.\n"}]