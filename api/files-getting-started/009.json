[{"tag":"h1","inner":"React Nativo"},{"tag":"p","inner":"React Query está diseñado para funcionar fuera de la caja con React Native, con la excepción de las devtools, que solo son compatibles con React DOM en este momento.\n"},{"tag":"p","inner":"\nHay un plugin de Flipper de 3rd party que puedes probar: https://github.com/bgaleotti/react-query-native-devtools.\n\n"},{"tag":"p","inner":"Si desea ayudarnos a hacer que la plataforma devtools incorporada sea agnóstica, ¡háganoslo saber!\n"},{"tag":"h2","inner":"Gestión del estado en línea"},{"tag":"p","inner":"React Query ya admite la recuperación automática al volver a conectarse en el navegador web. Para agregar este comportamiento en React Native, debe usar React Query como en el siguiente ejemplo: (onlineManager ) "},{"tag":"gdscript","inner":"import NetInfo from '@react-native-community/netinfo'\n import { onlineManager } from 'react-query'\n \n onlineManager.setEventListener(setOnline => {\n   return NetInfo.addEventListener(state => {\n     setOnline(state.isConnected)\n   })\n })"},{"tag":"h2","inner":"Recuperar el enfoque de la aplicación"},{"tag":"p","inner":"En React Native tienes que usar React Query para recuperar cuando la aplicación está enfocada. (focusManager)"},{"tag":"gdscript","inner":"import { focusManager } from 'react-query'\n \n function onAppStateChange(status: AppStateStatus) {\n   if (Platform.OS !== 'web') {\n     focusManager.setFocused(status === 'active')\n   }\n }\n \n useEffect(() => {\n   const subscription = AppState.addEventListener('change', onAppStateChange)\n \n   return () => subscription.remove()\n }, [])"},{"tag":"h2","inner":"Actualizar en el enfoque de pantalla"},{"tag":"p","inner":"En algunas situaciones, es posible que desee volver a recuperar la consulta cuando una pantalla nativa de React se enfoca nuevamente. Este gancho personalizado llamará a la función proporcionada cuando la pantalla vuelva a enfocarse. (refetch)"},{"tag":"gdscript","inner":"import React from 'react'\n import { useFocusEffect } from '@react-navigation/native'\n \n export function useRefreshOnFocus<T>(refetch: () => Promise<T>) {\n   const firstTimeRef = React.useRef(true)\n \n   useFocusEffect(\n     React.useCallback(() => {\n       if (firstTimeRef.current) {\n          firstTimeRef.current = false;\n          return;\n       }\n \n       refetch()\n     }, [refetch])\n   )\n }"},{"tag":"p","inner":"En el código anterior, se omite la primera vez porque llama a nuestra devolución de llamada en el montaje además del enfoque de la pantalla. (refetch , useFocusEffect)"}]